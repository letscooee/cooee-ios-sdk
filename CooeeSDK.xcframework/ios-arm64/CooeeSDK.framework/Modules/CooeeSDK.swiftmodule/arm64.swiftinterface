// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios14.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CooeeSDK
import AVFoundation
import AVKit
@_exported import CooeeSDK
import CoreBluetooth
import CoreLocation
import CoreTelephony
import Foundation
import Swift
import SystemConfiguration
import UIKit
public enum DownloadError : Swift.Error {
  case emptyData
  case invalidImage
  public static func == (a: CooeeSDK.DownloadError, b: CooeeSDK.DownloadError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class ImageDownloader {
  public static let shared: CooeeSDK.ImageDownloader
  public func downloadImage(forURL url: Foundation.URL, completion: @escaping (Swift.Result<UIKit.UIImage, Swift.Error>) -> Swift.Void)
  @objc deinit
}
@available(iOS 9.0, *)
extension UIScreen {
  public static let pixelsPerInch: CoreGraphics.CGFloat?
  public static let pixelsPerCentimeter: CoreGraphics.CGFloat?
  public static let pointsPerInch: CoreGraphics.CGFloat?
  public static let pointsPerCentimeter: CoreGraphics.CGFloat?
  public static let dimensionInInches: CoreGraphics.CGSize?
  public static let dimensionInCentimeters: CoreGraphics.CGSize?
}
@objc @_inheritsConvenienceInitializers open class AbstractOperation : Foundation.Operation {
  @objc override dynamic public var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isReady: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic open class func keyPathsForValuesAffectingValue(forKey key: Swift.String) -> Swift.Set<Swift.String>
  @objc override dynamic public func start()
  @objc override dynamic open func main()
  final public func finish()
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class NotificationPayload : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public static let shared: CooeeSDK.NotificationPayload
  public func getPayload(on viewController: UIKit.UIViewController)
  public func getPayload2(on viewController: UIKit.UIViewController)
  public func getPayload3(on viewController: UIKit.UIViewController)
  public func getPayload4(on viewController: UIKit.UIViewController)
  public func getPayload(from dataString: Swift.String, viewController: UIKit.UIViewController)
  public func getPayload(from dict: [Swift.String : Any], viewController: UIKit.UIViewController)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HttpCalls : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class NotificationClass : UserNotifications.UNNotificationServiceExtension {
  @objc override dynamic public func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
public protocol InAppButtonClickDelegate {
  func getPayload(info: [Swift.String : Swift.String]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Cooee : ObjectiveC.NSObject {
  public static let shared: CooeeSDK.Cooee
  public var screenName: Swift.String?
  @objc public func updateFirebaseToken(_ notification: Foundation.Notification)
  public func fetchUDID() -> Swift.String?
  @objc public func sendEvent(withName: Swift.String, properties: [Swift.String : Any])
  public func updateProfile(withProperties: [Swift.String : Any]?, andData: [Swift.String : Any]?)
  @objc deinit
}
extension Cooee : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
}
extension Cooee : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
}
extension CooeeSDK.DownloadError : Swift.Equatable {}
extension CooeeSDK.DownloadError : Swift.Hashable {}
